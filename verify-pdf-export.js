// GlucoBalance - PDF Export Verification Script
class PDFExportVerification {
    constructor() {
        this.testResults = [];
        this.mockReport = null;
        this.init();
    }

    init() {
        console.log('PDF Export Verification initialized');
        this.runVerificationTests();
    }

    async runVerificationTests() {
        console.log('üîç Starting PDF Export Verification Tests...');
        
        try {
            await this.testPDFServiceInitialization();
            await this.testJsPDFLibraryLoading();
            await this.createMockReport();
            await this.testPDFGeneration();
            await this.testPlainLanguageSummary();
            await this.testDataCollectionSuggestions();
            await this.testPDFDownload();
            await this.testErrorHandling();
            
            this.displayResults();
            
        } catch (error) {
            console.error('‚ùå Verification failed:', error);
            this.addResult('CRITICAL', 'Verification process failed', error.message);
            this.displayResults();
        }
    }

    async testPDFServiceInitialization() {
        console.log('üìã Testing PDF Service Initialization...');
        
        try {
            // Check if PDF service exists
            if (!window.pdfExportService) {
                throw new Error('PDF Export Service not found');
            }

            // Check if service is properly initialized
            if (typeof window.pdfExportService.generateReportPDF !== 'function') {
                throw new Error('PDF generation method not available');
            }

            this.addResult('PASS', 'PDF Service Initialization', 'Service properly initialized');

        } catch (error) {
            this.addResult('FAIL', 'PDF Service Initialization', error.message);
            throw error;
        }
    }

    async testJsPDFLibraryLoading() {
        console.log('üìö Testing jsPDF Library Loading...');
        
        try {
            // Test library loading
            await window.pdfExportService.loadJsPDF();
            
            if (!window.jsPDF) {
                throw new Error('jsPDF library not loaded');
            }

            // Test basic jsPDF functionality
            const { jsPDF } = window.jsPDF;
            const testDoc = new jsPDF();
            testDoc.text('Test', 10, 10);
            
            if (!testDoc.output) {
                throw new Error('jsPDF functionality not working');
            }

            this.addResult('PASS', 'jsPDF Library Loading', 'Library loaded and functional');

        } catch (error) {
            this.addResult('FAIL', 'jsPDF Library Loading', error.message);
            throw error;
        }
    }

    createMockReport() {
        console.log('üìÑ Creating Mock Report...');
        
        try {
            this.mockReport = {
                header: {
                    title: 'COMPREHENSIVE DIABETES PREVENTION HEALTH REPORT',
                    subtitle: 'Generated by GlucoBalance Digital Health Platform',
                    patientId: 'test-123',
                    patientName: 'John Doe',
                    reportDate: '2024-01-15',
                    reportPeriod: '2023-12-16 to 2024-01-15',
                    reportType: 'Clinical Summary Report',
                    generatedBy: 'AI-Enhanced Health Analytics System'
                },
                executiveSummary: 'Patient demonstrates moderate engagement with digital health monitoring over the 30-day period. Current diabetes risk score: 16 (High Risk). Mental health status shows average mood rating of 3.2/5. Continued monitoring and lifestyle interventions recommended.',
                patientSummary: {
                    demographics: {
                        name: 'John Doe',
                        age: 45,
                        gender: 'male',
                        registrationDate: '2023-10-01'
                    },
                    engagementMetrics: {
                        totalDataPoints: 45,
                        engagementLevel: 'Moderate',
                        dataCompleteness: 75,
                        activeDays: 22
                    }
                },
                clinicalFindings: {
                    keyFindings: [
                        'Diabetes risk assessment completed with score of 16 (High Risk)',
                        'Mental health monitoring shows 25 mood entries with average rating 3.2/5',
                        'Nutrition engagement: 3 meal plans generated with 78% average adherence'
                    ],
                    alertsAndConcerns: [
                        'High diabetes risk score requires immediate attention',
                        'Declining mood trend observed in recent weeks'
                    ]
                },
                riskAssessment: {
                    assessmentSummary: {
                        totalAssessments: 2,
                        latestScore: 16,
                        latestCategory: 'High Risk',
                        assessmentDate: '2024-01-10'
                    },
                    clinicalInterpretation: 'Patient shows high risk for diabetes development based on age, family history, and lifestyle factors. Immediate lifestyle intervention recommended.'
                },
                mentalHealthAssessment: {
                    moodAssessment: {
                        totalEntries: 25,
                        averageMood: 3.2,
                        trend: 'Declining'
                    },
                    mentalHealthRecommendations: [
                        'Consider stress management techniques',
                        'Evaluate need for mental health support',
                        'Monitor mood patterns more closely'
                    ]
                },
                lifestyleFactors: {
                    nutritionalAdherence: {
                        mealPlansGenerated: 3,
                        averageAdherence: 0.78
                    },
                    lifestyleRecommendations: [
                        'Increase physical activity to 150 minutes per week',
                        'Focus on Mediterranean-style diet',
                        'Implement stress reduction strategies'
                    ]
                },
                trendAnalysis: {
                    riskScoreTrends: { trend: 'Stable', change: 0 },
                    moodTrends: { trend: 'Declining' },
                    clinicalSignificance: 'Declining mood trend may impact diabetes risk management'
                },
                recommendations: [
                    'Schedule diabetes screening with healthcare provider',
                    'Implement structured lifestyle modification program',
                    'Consider mental health evaluation and support'
                ],
                followUp: [
                    'Follow-up appointment in 3 months',
                    'Continue digital health monitoring',
                    'Review lifestyle modifications at next visit'
                ],
                dataQuality: {
                    completeness: { overall: 75 },
                    reliability: 'Good',
                    limitations: [
                        'Limited nutrition adherence tracking',
                        'Inconsistent mood logging in early period'
                    ],
                    recommendations: [
                        'Set daily reminders for mood logging',
                        'Increase meal plan adherence tracking'
                    ]
                },
                footer: {
                    disclaimer: 'This report is generated by GlucoBalance AI-enhanced health analytics for informational purposes. Clinical decisions should be based on comprehensive patient evaluation and professional medical judgment.',
                    generatedAt: new Date().toISOString(),
                    version: '1.0',
                    contact: 'For questions about this report, please consult with the patient\'s healthcare provider.'
                }
            };

            this.addResult('PASS', 'Mock Report Creation', 'Comprehensive mock report created');

        } catch (error) {
            this.addResult('FAIL', 'Mock Report Creation', error.message);
            throw error;
        }
    }

    async testPDFGeneration() {
        console.log('üîß Testing PDF Generation...');
        
        try {
            if (!this.mockReport) {
                throw new Error('Mock report not available');
            }

            // Test basic PDF generation
            const pdfDoc = await window.pdfExportService.generateReportPDF(this.mockReport);
            
            if (!pdfDoc) {
                throw new Error('PDF document not generated');
            }

            // Test PDF output
            const pdfOutput = pdfDoc.output('dataurlstring');
            if (!pdfOutput || !pdfOutput.startsWith('data:application/pdf')) {
                throw new Error('Invalid PDF output format');
            }

            // Test PDF with options
            const pdfWithOptions = await window.pdfExportService.generateReportPDF(this.mockReport, {
                includePlainLanguage: true
            });

            if (!pdfWithOptions) {
                throw new Error('PDF with options not generated');
            }

            this.addResult('PASS', 'PDF Generation', 'PDF documents generated successfully');
            this.testPDF = pdfDoc; // Store for further tests

        } catch (error) {
            this.addResult('FAIL', 'PDF Generation', error.message);
            throw error;
        }
    }

    async testPlainLanguageSummary() {
        console.log('üìù Testing Plain Language Summary...');
        
        try {
            // Test plain language content generation
            const plainLanguageContent = window.pdfExportService.generatePlainLanguageSummary(this.mockReport);
            
            if (!plainLanguageContent || typeof plainLanguageContent !== 'object') {
                throw new Error('Plain language content not generated');
            }

            // Check required sections
            const requiredSections = [
                'What This Report Shows',
                'Your Diabetes Risk',
                'Your Mood and Mental Health',
                'What To Do Next'
            ];

            for (const section of requiredSections) {
                if (!plainLanguageContent[section]) {
                    throw new Error(`Missing required section: ${section}`);
                }
            }

            // Test risk explanation
            const riskExplanation = window.pdfExportService.getRiskExplanation('High Risk');
            if (!riskExplanation || riskExplanation.length < 10) {
                throw new Error('Risk explanation not generated properly');
            }

            this.addResult('PASS', 'Plain Language Summary', 'Summary generated with all required sections');

        } catch (error) {
            this.addResult('FAIL', 'Plain Language Summary', error.message);
        }
    }

    async testDataCollectionSuggestions() {
        console.log('üí° Testing Data Collection Suggestions...');
        
        try {
            // Create mock health data with low completeness
            const mockHealthData = {
                summary: {
                    dataCompleteness: {
                        overall: 45,
                        assessments: 30,
                        mood: 60,
                        nutrition: 20
                    }
                }
            };

            // Test suggestions generation
            const suggestions = window.pdfExportService.generateDataCollectionSuggestions(mockHealthData);
            
            if (!Array.isArray(suggestions)) {
                throw new Error('Suggestions not returned as array');
            }

            if (suggestions.length === 0) {
                throw new Error('No suggestions generated for low completeness data');
            }

            // Check suggestion structure
            for (const suggestion of suggestions) {
                if (!suggestion.category || !suggestion.suggestion || !suggestion.priority || !suggestion.action) {
                    throw new Error('Suggestion missing required fields');
                }
            }

            // Test with high completeness data
            const highCompletenessData = {
                summary: {
                    dataCompleteness: {
                        overall: 95,
                        assessments: 100,
                        mood: 90,
                        nutrition: 95
                    }
                }
            };

            const highCompletenessSuggestions = window.pdfExportService.generateDataCollectionSuggestions(highCompletenessData);
            
            // Should have fewer or no suggestions for high completeness
            if (highCompletenessSuggestions.length > suggestions.length) {
                throw new Error('High completeness data should generate fewer suggestions');
            }

            this.addResult('PASS', 'Data Collection Suggestions', `Generated ${suggestions.length} suggestions for low completeness data`);

        } catch (error) {
            this.addResult('FAIL', 'Data Collection Suggestions', error.message);
        }
    }

    async testPDFDownload() {
        console.log('üíæ Testing PDF Download...');
        
        try {
            if (!this.testPDF) {
                throw new Error('No test PDF available');
            }

            // Test PDF blob generation
            const pdfBlob = await window.pdfExportService.getPDFBlob(this.testPDF);
            
            if (!pdfBlob || !(pdfBlob instanceof Blob)) {
                throw new Error('PDF blob not generated');
            }

            if (pdfBlob.type !== 'application/pdf') {
                throw new Error('Incorrect blob MIME type');
            }

            if (pdfBlob.size < 1000) {
                throw new Error('PDF blob too small, likely empty');
            }

            // Test PDF data URL generation
            const pdfDataURL = await window.pdfExportService.getPDFDataURL(this.testPDF);
            
            if (!pdfDataURL || !pdfDataURL.startsWith('data:application/pdf')) {
                throw new Error('PDF data URL not generated correctly');
            }

            this.addResult('PASS', 'PDF Download', `PDF blob generated (${Math.round(pdfBlob.size / 1024)} KB)`);

        } catch (error) {
            this.addResult('FAIL', 'PDF Download', error.message);
        }
    }

    async testErrorHandling() {
        console.log('‚ö†Ô∏è Testing Error Handling...');
        
        try {
            let errorsCaught = 0;

            // Test with invalid report data
            try {
                await window.pdfExportService.generateReportPDF(null);
            } catch (error) {
                errorsCaught++;
            }

            // Test with malformed report data
            try {
                await window.pdfExportService.generateReportPDF({ invalid: 'data' });
            } catch (error) {
                errorsCaught++;
            }

            // Test page break functionality
            try {
                const testDoc = new window.jsPDF.jsPDF();
                const yPosition = window.pdfExportService.checkPageBreak(testDoc, 300);
                if (yPosition !== 20) { // Should add new page and return 20
                    throw new Error('Page break not working correctly');
                }
            } catch (error) {
                // This is expected to work, so it's a real error
                throw error;
            }

            if (errorsCaught < 2) {
                throw new Error('Error handling not working properly');
            }

            this.addResult('PASS', 'Error Handling', `Properly caught ${errorsCaught} expected errors`);

        } catch (error) {
            this.addResult('FAIL', 'Error Handling', error.message);
        }
    }

    addResult(status, test, message) {
        const result = {
            status,
            test,
            message,
            timestamp: new Date().toISOString()
        };
        
        this.testResults.push(result);
        
        const emoji = status === 'PASS' ? '‚úÖ' : status === 'FAIL' ? '‚ùå' : '‚ö†Ô∏è';
        console.log(`${emoji} ${test}: ${message}`);
    }

    displayResults() {
        console.log('\nüìä PDF Export Verification Results:');
        console.log('=====================================');
        
        const passed = this.testResults.filter(r => r.status === 'PASS').length;
        const failed = this.testResults.filter(r => r.status === 'FAIL').length;
        const warnings = this.testResults.filter(r => r.status === 'WARN').length;
        
        console.log(`‚úÖ Passed: ${passed}`);
        console.log(`‚ùå Failed: ${failed}`);
        console.log(`‚ö†Ô∏è Warnings: ${warnings}`);
        console.log(`üìã Total Tests: ${this.testResults.length}`);
        
        if (failed === 0) {
            console.log('\nüéâ All PDF Export tests passed! The system is ready for production.');
        } else {
            console.log('\nüö® Some tests failed. Please review the issues above.');
        }
        
        // Display detailed results
        console.log('\nDetailed Results:');
        this.testResults.forEach(result => {
            const emoji = result.status === 'PASS' ? '‚úÖ' : result.status === 'FAIL' ? '‚ùå' : '‚ö†Ô∏è';
            console.log(`${emoji} ${result.test}: ${result.message}`);
        });

        // Store results for potential UI display
        window.pdfExportVerificationResults = {
            summary: { passed, failed, warnings, total: this.testResults.length },
            details: this.testResults,
            timestamp: new Date().toISOString()
        };
    }
}

// Auto-run verification when script loads
document.addEventListener('DOMContentLoaded', () => {
    // Wait a bit for all services to initialize
    setTimeout(() => {
        new PDFExportVerification();
    }, 1000);
});

// Export for manual testing
window.PDFExportVerification = PDFExportVerification;